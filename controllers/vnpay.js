const VNPayService = require('../util/vnpay');
const Order = require('../models/order');
const { sendEmail } = require('../util/email');

/**
 * X·ª≠ l√Ω return URL t·ª´ VNPay (khi user quay l·∫°i t·ª´ trang thanh to√°n)
 */
exports.handleVNPayReturn = async (req, res) => {
    try {
        console.log('üîÑ X·ª≠ l√Ω VNPay return:', req.query);
        
        const vnpayService = new VNPayService();
        const verifyResult = await vnpayService.verifyReturn(req.query);
        
        if (verifyResult.success) {
            // Thanh to√°n th√†nh c√¥ng
            console.log('‚úÖ Thanh to√°n VNPay th√†nh c√¥ng:', verifyResult.orderId);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            await Order.updatePaymentStatus(verifyResult.orderId, 'paid', {
                paymentMethod: 'vnpay',
                transactionId: req.query.vnp_TransactionNo || '',
                paidAt: new Date(),
                vnpayData: verifyResult.vnpayData
            });
            
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒë∆°n h√†ng v·ªõi th√¥ng b√°o th√†nh c√¥ng
            req.session.successMessage = `Thanh to√°n th√†nh c√¥ng! M√£ giao d·ªãch: ${req.query.vnp_TransactionNo || 'N/A'}`;
            return res.redirect('/orders');
            
        } else {
            // Thanh to√°n th·∫•t b·∫°i
            console.log('‚ùå Thanh to√°n VNPay th·∫•t b·∫°i:', verifyResult.orderId);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            await Order.updatePaymentStatus(verifyResult.orderId, 'failed', {
                paymentMethod: 'vnpay',
                failedAt: new Date(),
                failureReason: verifyResult.message || 'Thanh to√°n th·∫•t b·∫°i'
            });
            
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒë∆°n h√†ng v·ªõi th√¥ng b√°o l·ªói
            req.session.errorMessage = `Thanh to√°n th·∫•t b·∫°i: ${verifyResult.message || 'Vui l√≤ng th·ª≠ l·∫°i'}`;
            return res.redirect('/orders');
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω VNPay return:', error);
        req.session.errorMessage = 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.';
        return res.redirect('/orders');
    }
};

/**
 * X·ª≠ l√Ω IPN (Instant Payment Notification) t·ª´ VNPay
 */
exports.handleVNPayIPN = async (req, res) => {
    try {
        console.log('üîÑ X·ª≠ l√Ω VNPay IPN:', req.query);
        
        const vnpayService = new VNPayService();
        const verifyResult = await vnpayService.verifyIPN(req.query);
        
        if (verifyResult.success) {
            console.log('‚úÖ IPN VNPay h·ª£p l·ªá:', verifyResult.orderId);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            await Order.updatePaymentStatus(verifyResult.orderId, 'paid', {
                paymentMethod: 'vnpay',
                transactionId: req.query.vnp_TransactionNo || '',
                paidAt: new Date(),
                vnpayData: verifyResult
            });
            
            // G·ª≠i email x√°c nh·∫≠n
            try {
                const order = await Order.findById(verifyResult.orderId);
                if (order && order.user && order.user.email) {
                    await sendEmail(
                        order.user.email,
                        'X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng',
                        `
                        <h2>Thanh to√°n th√†nh c√¥ng!</h2>
                        <p>ƒê∆°n h√†ng <strong>${verifyResult.orderId}</strong> ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng qua VNPay.</p>
                        <p><strong>M√£ giao d·ªãch:</strong> ${req.query.vnp_TransactionNo || 'N/A'}</p>
                        <p><strong>S·ªë ti·ªÅn:</strong> ${verifyResult.amount?.toLocaleString('vi-VN')} VNƒê</p>
                        <p><strong>Th·ªùi gian:</strong> ${new Date().toLocaleString('vi-VN')}</p>
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!</p>
                        `
                    );
                    console.log('‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n thanh to√°n VNPay');
                }
            } catch (emailError) {
                console.error('‚ùå L·ªói g·ª≠i email x√°c nh·∫≠n VNPay:', emailError);
            }
            
            // Tr·∫£ v·ªÅ response cho VNPay
            return res.status(200).json({ RspCode: '00', Message: 'success' });
            
        } else {
            console.log('‚ùå IPN VNPay kh√¥ng h·ª£p l·ªá:', verifyResult.orderId);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th·∫•t b·∫°i
            await Order.updatePaymentStatus(verifyResult.orderId, 'failed', {
                paymentMethod: 'vnpay',
                failedAt: new Date(),
                failureReason: verifyResult.message || 'IPN kh√¥ng h·ª£p l·ªá'
            });
            
            return res.status(400).json({ RspCode: '97', Message: 'Invalid signature' });
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω VNPay IPN:', error);
        return res.status(500).json({ RspCode: '99', Message: 'Internal server error' });
    }
};

/**
 * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n VNPay
 */
exports.checkVNPayPaymentStatus = async (req, res) => {
    try {
        const { orderId } = req.params;
        
        if (!orderId) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu m√£ ƒë∆°n h√†ng'
            });
        }
        
        console.log('üîÑ Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n VNPay:', orderId);
        
        // L·∫•y th√¥ng tin ƒë∆°n h√†ng t·ª´ database
        const order = await Order.findById(orderId);
        
        if (!order) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
            });
        }
        
        return res.json({
            success: true,
            orderId: orderId,
            paymentStatus: order.paymentStatus,
            paymentMethod: order.paymentMethod,
            transactionId: order.transactionId,
            paidAt: order.paidAt,
            message: 'L·∫•y th√¥ng tin ƒë∆°n h√†ng th√†nh c√¥ng'
        });
        
    } catch (error) {
        console.error('‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i VNPay:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói server khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n'
        });
    }
};