const Product = require('../models/product');
const Order = require('../models/order');
const User = require('../models/user');
const VNPayService = require('../util/vnpay');
const { sendOrderConfirmation, sendNewOrderNotification } = require('../util/email');
const mongodb = require('mongodb'); // üëà Th√™m d√≤ng n√†y v√†o ƒë√¢y
const fs = require('fs');
const { generateOrderPDF } = require('../util/pdf'); // Th√™m import n√†y
const mongoose = require('mongoose'); // Th√™m import n√†y


exports.getProducts = (req, res, next) => {
    Product.fetchAll()
        .then(products => {
            res.render('shop', {
                prods: products,
                pageTitle: 'Ph∆∞∆°ng Store | Danh s√°ch s·∫£n ph·∫©m',
                path: '/products',
                hasProducts: products.length > 0,
                activeShop: true,
                productCSS: true,
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        })
        .catch(err => {
            console.log(err);
            res.status(500).render('error', {
                pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
                path: '/error',
                error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        });
};

exports.getProduct = async (req, res, next) => {
    try {
        const prodId = req.params.productId;
        const product = await Product.findById(prodId);

        if (!product) {
            return res.status(404).render('404', {
                pageTitle: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m | Ph∆∞∆°ng Store',
                path: '/404',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        // L·∫•y c√°c s·∫£n ph·∫©m li√™n quan (c√πng lo·∫°i ho·∫∑c gi√° t∆∞∆°ng ƒë∆∞∆°ng)
        const relatedProducts = await Product.findRelatedProducts(product);

        res.render('shop/product-detail', {
            product: product,
            pageTitle: `${product.title} | Ph∆∞∆°ng Store`,
            path: '/products',
            relatedProducts: relatedProducts,
            hasRelatedProducts: relatedProducts.length > 0,
            activeShop: true,
            productCSS: true,
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    } catch (err) {
        console.log(err);
        res.status(500).render('error', {
            pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
            path: '/error',
            error: 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·∫£n ph·∫©m',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.getIndex = (req, res, next) => {
    Product.fetchAll()
        .then(products => {
            res.render('index', {
                prods: products,
                pageTitle: 'Ph∆∞∆°ng Store | Trang ch·ªß',
                path: '/',
                hasProducts: products.length > 0,
                activeShop: true,
                productCSS: true,
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        })
        .catch(err => {
            console.log(err);
            res.status(500).render('error', {
                pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
                path: '/error',
                error: 'Kh√¥ng th·ªÉ t·∫£i trang ch·ªß',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        });
};


exports.getCart = async (req, res, next) => {
    try {
        if (!req.session.user || !req.session.user._id) {
            return res.redirect('/create-default-user');
        }

        const userData = await User.findById(req.session.user._id);
        if (!userData) {
            return res.redirect('/create-default-user');
        }

        const user = new User(userData.name, userData.email, userData.role);
        user._id = new mongodb.ObjectId(userData._id);
        user.cart = userData.cart || { items: [], totalPrice: 0 };

        const cart = await user.getCart();

        res.render('shop/cart', {
            path: '/cart',
            pageTitle: 'Gi·ªè h√†ng c·ªßa b·∫°n',
            products: cart.items || [],
            totalPrice: cart.totalPrice || 0,
            activeCart: true,
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    } catch (err) {
        console.error('L·ªói khi t·∫£i gi·ªè h√†ng:\n', err.stack || err);
        res.status(500).render('error', {
            pageTitle: 'Error',
            path: '/error',
            error: 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.postCart = async (req, res, next) => {
    try {
        if (!req.session.user || !req.session.user._id) {
            return res.redirect('/create-default-user');
        }

        const prodId = req.body.productId;
        const quantity = parseInt(req.body.quantity) || 1;

        if (!prodId) {
            return res.status(400).render('error', {
                pageTitle: 'Error',
                path: '/error',
                error: 'Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        const product = await Product.findById(prodId);
        if (!product) {
            return res.status(404).render('error', {
                pageTitle: 'Error',
                path: '/error',
                error: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        const userData = await User.findById(req.session.user._id);
        if (!userData) {
            return res.redirect('/create-default-user');
        }

        const user = new User(userData.name, userData.email, userData.role);
        user._id = new mongodb.ObjectId(userData._id);
        user.cart = userData.cart || { items: [], totalPrice: 0 };

        if (!(product._id instanceof mongodb.ObjectId)) {
            product._id = new mongodb.ObjectId(product._id);
        }

        try {
            await user.addToCart(product, quantity);
            res.redirect('/cart');
        } catch (err) {
            // N·∫øu l·ªói li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            if (err.message.includes('S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho')) {
                return res.status(400).render('error', {
                    pageTitle: 'L·ªói',
                    path: '/error',
                    error: err.message,
                    isAuthenticated: req.session.user ? true : false,
                    isAdmin: req.session.user && req.session.user.role === 'admin'
                });
            }
            throw err;
        }
    } catch (err) {
        console.error('L·ªói khi th√™m v√†o gi·ªè h√†ng:\n', err.stack || err);
        res.status(500).render('error', {
            pageTitle: 'Error',
            path: '/error',
            error: 'Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.postCartDeleteProduct = async (req, res, next) => {
    try {
        if (!req.session.user || !req.session.user._id) {
            return res.redirect('/create-default-user');
        }

        const prodId = req.body.productId;
        const userData = await User.findById(req.session.user._id);

        if (!userData) {
            return res.redirect('/create-default-user');
        }

        // T·∫°o instance User ƒë√∫ng c√°ch
        const user = new User(userData.name, userData.email, userData.role);
        user._id = new mongodb.ObjectId(userData._id);
        user.cart = userData.cart || { items: [], totalPrice: 0 };

        await user.removeFromCart(prodId);
        res.redirect('/cart');
    } catch (err) {
        console.log(err);
        res.status(500).render('error', {
            pageTitle: 'Error',
            path: '/error',
            error: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.postCartUpdateQuantity = async (req, res, next) => {
    try {
        if (!req.session.user || !req.session.user._id) {
            return res.redirect('/create-default-user');
        }

        const prodId = req.body.productId;
        const quantity = parseInt(req.body.quantity) || 1;

        if (!prodId) {
            return res.status(400).render('error', {
                pageTitle: 'Error',
                path: '/error',
                error: 'Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        const userData = await User.findById(req.session.user._id);
        if (!userData) {
            return res.redirect('/create-default-user');
        }

        const user = new User(userData.name, userData.email, userData.role);
        user._id = new mongodb.ObjectId(userData._id);
        user.cart = userData.cart || { items: [], totalPrice: 0 };

        // Remove the product from cart first
        await user.removeFromCart(prodId);

        // Add it back with new quantity
        const product = await Product.findById(prodId);
        if (product) {
            await user.addToCart(product, quantity);
        }

        res.redirect('/cart');
    } catch (err) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:\n', err.stack || err);
        res.status(500).render('error', {
            pageTitle: 'Error',
            path: '/error',
            error: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

exports.postOrder = async (req, res, next) => {
  try {
    const { paymentMethod, name, phone, address, note, vnpayMethod, vnpayBank } = req.body;
    
    // Validate payment method
    const validPaymentMethods = ['cod', 'vnpay', 'bank_transfer', 'e_wallet'];
    if (!validPaymentMethods.includes(paymentMethod)) {
      return res.status(400).json({
        success: false,
        message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá'
      });
    }

    const userData = await User.findById(req.user._id);
    if (!userData) {
      return res.redirect('/login');
    }
    
    const user = new User(userData.name, userData.email, userData.role);
    user._id = new mongodb.ObjectId(userData._id);
    user.cart = userData.cart || { items: [], totalPrice: 0 };
    
    const cart = await user.getCart();
    
    if (!cart.items || cart.items.length === 0) {
      return res.redirect('/cart');
    }

    const products = cart.items.map(item => {
      return {
        quantity: item.quantity,
        product: {
          _id: item._id,
          title: item.title,
          price: item.price,
          imageUrl: item.imageUrl
        }
      };
    });

    // Calculate total
    const subtotal = products.reduce((total, item) => {
      return total + (item.product.price * item.quantity);
    }, 0);
    
    const shippingFee = subtotal >= 500000 ? 0 : 30000;
    const totalAmount = subtotal + shippingFee;

    const order = new Order({
      user: {
        userId: req.user._id,
        name: name,
        phone: phone,
        address: address
      },
      products: products,
      totalAmount: totalAmount,
      shippingFee: shippingFee,
      paymentMethod: paymentMethod,
      paymentStatus: 'pending',
      orderStatus: 'pending',
      note: note || '',
      orderDate: new Date()
    });

    await order.save();

    // Handle different payment methods
    if (paymentMethod === 'vnpay') {
      const vnpayService = new VNPayService();
      
      // Create VNPay payment URL
      const paymentData = {
        amount: totalAmount,
        orderInfo: `Thanh toan don hang ${order._id.toString()}`,
        orderType: 'other',
        bankCode: '',
        locale: 'vn',
        ipAddr: req.ip || req.connection.remoteAddress || '127.0.0.1'
      };
      
      console.log('PaymentData being sent to VNPay:', JSON.stringify(paymentData, null, 2));
      
      const paymentResult = vnpayService.createPayment(paymentData);
      console.log('VNPay payment result:', JSON.stringify(paymentResult, null, 2));
      
      if (paymentResult.success) {
        // Store order ID in session for return handling
        req.session.pendingOrderId = order._id;
        
        console.log('Redirecting to VNPay URL:', paymentResult.paymentUrl);
        // Redirect tr·ª±c ti·∫øp ƒë·∫øn VNPay
        return res.redirect(paymentResult.paymentUrl);
      } else {
        console.error('VNPay payment creation failed:', paymentResult.error);
        return res.status(500).json({
          success: false,
          message: 'Kh√¥ng th·ªÉ t·∫°o li√™n k·∫øt thanh to√°n VNPay: ' + (paymentResult.error || 'Unknown error')
        });
      }
    } else if (paymentMethod === 'cod') {
      // COD - Cash on Delivery
      order.paymentStatus = 'pending';
      order.orderStatus = 'confirmed';
      await order.save();
      
      // Clear cart and redirect
      await user.clearCart();
      
      // Set success message
      req.session.successMessage = 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! B·∫°n s·∫Ω thanh to√°n khi nh·∫≠n h√†ng.';
      
      return res.redirect('/orders');
    } else {
      // Invalid payment method
      return res.status(400).json({
        success: false,
        message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá'
      });
    }
  } catch (error) {
    console.error('Error creating order:', error);
    next(error);
  }
};

exports.getOrders = async (req, res, next) => {
    try {
        if (!req.session.user || !req.session.user._id) {
            return res.redirect('/create-default-user');
        }

        const user = await User.findById(req.session.user._id);

        if (!user) {
            return res.redirect('/create-default-user');
        }

        const orders = await Order.findByUserId(user._id);

        // ‚úÖ ƒê·∫£m b·∫£o t·∫•t c·∫£ order ƒë·ªÅu c√≥ .items l√† array
        const cleanedOrders = orders.map(order => {
            return {
                ...order,
                items: Array.isArray(order.items)
                    ? order.items
                    : (Array.isArray(order.products) ? order.products : [])
            };
        });

        res.render('shop/orders', {
            path: '/orders',
            pageTitle: 'ƒê∆°n h√†ng c·ªßa b·∫°n | Ph∆∞∆°ng Store',
            orders: cleanedOrders,
            activeOrders: true,
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin',
            success: req.query.success === 'true'
        });
    } catch (err) {
        console.log(err);
        res.status(500).render('error', {
            pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
            path: '/error',
            error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng',
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};

// Controller t·∫£i xu·ªëng h√≥a ƒë∆°n cho ng∆∞·ªùi d√πng
exports.getDownloadInvoice = async (req, res, next) => {
    try {
        const orderId = req.params.orderId;
        console.log('B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng h√≥a ƒë∆°n cho ƒë∆°n h√†ng:', orderId);

        if (!req.session.user || !req.session.user._id) {
            return res.redirect('/login');
        }

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa orderId
        if (!orderId || !mongoose.Types.ObjectId.isValid(orderId)) {
            console.error('ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá:', orderId);
            return res.status(400).render('error', {
                pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
                path: '/error',
                error: 'ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        // L·∫•y th√¥ng tin ƒë∆°n h√†ng
        const order = await Order.findById(orderId);
        if (!order) {
            console.error('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID:', orderId);
            return res.status(404).render('error', {
                pageTitle: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng | Ph∆∞∆°ng Store',
                path: '/error',
                error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: ' + orderId,
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i kh√¥ng
        if (order.userId.toString() !== req.session.user._id.toString() && req.session.user.role !== 'admin') {
            console.error('Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y');
            return res.status(403).render('error', {
                pageTitle: 'Truy c·∫≠p b·ªã t·ª´ ch·ªëi | Ph∆∞∆°ng Store',
                path: '/error',
                error: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        const user = await User.findById(order.userId);
        if (!user) {
            console.error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID:', order.userId);
            return res.status(404).render('error', {
                pageTitle: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng | Ph∆∞∆°ng Store',
                path: '/error',
                error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        // T·∫°o PDF
        console.log('ƒêang t·∫°o PDF h√≥a ƒë∆°n...');
        const pdfPath = await generateOrderPDF(order, user);
        console.log('ƒê√£ t·∫°o PDF h√≥a ƒë∆°n th√†nh c√¥ng t·∫°i:', pdfPath);

        // Ki·ªÉm tra file PDF c√≥ t·ªìn t·∫°i kh√¥ng
        if (!fs.existsSync(pdfPath)) {
            console.error('File PDF kh√¥ng t·ªìn t·∫°i sau khi t·∫°o:', pdfPath);
            return res.status(500).render('error', {
                pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
                path: '/error',
                error: 'Kh√¥ng th·ªÉ t·∫°o file PDF h√≥a ƒë∆°n',
                isAuthenticated: req.session.user ? true : false,
                isAdmin: req.session.user && req.session.user.role === 'admin'
            });
        }

        // G·ª≠i file PDF v·ªÅ client
        res.download(pdfPath, `invoice-${orderId}.pdf`, (err) => {
            if (err) {
                console.error('L·ªói khi t·∫£i file PDF:', err);
                return res.status(500).render('error', {
                    pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
                    path: '/error',
                    error: 'Kh√¥ng th·ªÉ t·∫£i xu·ªëng file PDF: ' + err.message,
                    isAuthenticated: req.session.user ? true : false,
                    isAdmin: req.session.user && req.session.user.role === 'admin'
                });
            }
            console.log('ƒê√£ g·ª≠i file PDF h√≥a ƒë∆°n th√†nh c√¥ng');

            // X√≥a file sau khi ƒë√£ g·ª≠i
            fs.unlink(pdfPath, (err) => {
                if (err) {
                    console.error('L·ªói khi x√≥a file PDF:', err);
                } else {
                    console.log('ƒê√£ x√≥a file PDF h√≥a ƒë∆°n t·∫°m th·ªùi');
                }
            });
        });
    } catch (err) {
        console.error('L·ªói khi t·∫£i xu·ªëng h√≥a ƒë∆°n:', err);
        res.status(500).render('error', {
            pageTitle: 'L·ªói | Ph∆∞∆°ng Store',
            path: '/error',
            error: 'Kh√¥ng th·ªÉ t·∫£i xu·ªëng h√≥a ƒë∆°n: ' + err.message,
            isAuthenticated: req.session.user ? true : false,
            isAdmin: req.session.user && req.session.user.role === 'admin'
        });
    }
};
exports.getCheckout = (req, res, next) => {
¬† ¬† const cart = req.session.cart || { items: [] };

¬† ¬† const products = cart.items.map(item => {
¬† ¬† ¬† ¬† return {
¬† ¬† ¬† ¬† ¬† ¬† _id: item._id,
¬† ¬† ¬† ¬† ¬† ¬† title: item.title,
¬† ¬† ¬† ¬† ¬† ¬† price: item.price,
¬† ¬† ¬† ¬† ¬† ¬† quantity: item.quantity
¬† ¬† ¬† ¬† };
¬† ¬† });

¬† ¬† const totalPrice = cart.items.reduce((total, item) => {
¬† ¬† ¬† ¬† return total + item.price * item.quantity;
¬† ¬† }, 0);

¬† ¬† res.render('shop/checkout', {
¬† ¬† ¬† ¬† pageTitle: 'X√°c nh·∫≠n ƒë∆°n h√†ng',
¬† ¬† ¬† ¬† path: '/checkout',
¬† ¬† ¬† ¬† products,
¬† ¬† ¬† ¬† totalPrice
¬† ¬† });
};

