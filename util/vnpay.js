const { VNPay } = require('vn-payments');
const crypto = require('crypto');

class VNPayService {
    constructor() {
        this.vnpay = new VNPay({
            paymentGateway: process.env.VNPAY_GATEWAY || 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html',
            merchant: process.env.VNPAY_TMN_CODE || 'VNPAY01',
            secureSecret: process.env.VNPAY_HASH_SECRET || 'RAOEXHYVSDDIIENYWSLDIIZTANXUXZFJ',
            testMode: process.env.NODE_ENV !== 'production'
        });
    }

    /**
     * T·∫°o URL thanh to√°n VNPay
     * @param {Object} orderData - Th√¥ng tin ƒë∆°n h√†ng
     * @returns {Promise<string>} - URL thanh to√°n
     */
    async createPayment(orderData) {
        try {
            const {
                orderId,
                amount,
                orderInfo,
                returnUrl,
                ipAddr
            } = orderData;

            // D·ªØ li·ªáu thanh to√°n
            const checkoutData = {
                amount: amount,
                customerId: orderId,
                currency: 'VND',
                clientIp: ipAddr || '127.0.0.1',
                billingCity: 'Ha Noi',
                billingCountry: 'VN',
                billingPostCode: '100000',
                billingStateProvince: 'Ha Noi',
                billingStreet: 'Thanh Xuan',
                deliveryAddress: 'Thanh Xuan Ha Noi',
                deliveryCity: 'Ha Noi',
                deliveryCountry: 'VN',
                deliveryProvince: 'Ha Noi',
                orderDescription: orderInfo || `Thanh toan don hang ${orderId}`,
                orderCategory: 'other',
                returnUrl: returnUrl || process.env.VNPAY_RETURN_URL || 'http://localhost:5000/vnpay/return',
                transactionId: orderId,
                customFields: {
                    orderId: orderId
                }
            };

            console.log('üîÑ T·∫°o URL thanh to√°n VNPay:', {
                orderId,
                amount,
                orderInfo
            });

            // T·∫°o URL thanh to√°n
            const paymentUrl = await this.vnpay.buildCheckoutUrl(checkoutData);
            
            console.log('‚úÖ T·∫°o URL thanh to√°n VNPay th√†nh c√¥ng:', paymentUrl.href);
            
            return {
                success: true,
                paymentUrl: paymentUrl.href,
                orderId: orderId
            };

        } catch (error) {
            console.error('‚ùå L·ªói t·∫°o thanh to√°n VNPay:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * X√°c th·ª±c callback t·ª´ VNPay
     * @param {Object} query - Query parameters t·ª´ VNPay
     * @returns {Promise<Object>} - K·∫øt qu·∫£ x√°c th·ª±c
     */
    async verifyReturn(query) {
        try {
            console.log('üîÑ X√°c th·ª±c callback VNPay:', query);
            
            const results = await this.vnpay.verifyReturnUrl(query);
            
            console.log('‚úÖ K·∫øt qu·∫£ x√°c th·ª±c VNPay:', results);
            
            return {
                success: results.isSucceed,
                orderId: results.orderId,
                amount: results.amount,
                message: results.message,
                transactionStatus: results.isSucceed ? 'SUCCESS' : 'FAILED',
                vnpayData: results
            };

        } catch (error) {
            console.error('‚ùå L·ªói x√°c th·ª±c VNPay:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * X√°c th·ª±c IPN (Instant Payment Notification) t·ª´ VNPay
     * @param {Object} query - Query parameters t·ª´ VNPay IPN
     * @returns {Promise<Object>} - K·∫øt qu·∫£ x√°c th·ª±c
     */
    async verifyIPN(query) {
        try {
            console.log('üîÑ X√°c th·ª±c IPN VNPay:', query);
            
            const results = await this.vnpay.verifyReturnUrl(query);
            
            return {
                success: results.isSucceed,
                orderId: results.orderId,
                amount: results.amount,
                message: results.message,
                transactionStatus: results.isSucceed ? 'SUCCESS' : 'FAILED'
            };

        } catch (error) {
            console.error('‚ùå L·ªói x√°c th·ª±c IPN VNPay:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * T·∫°o secure hash cho VNPay
     * @param {Object} params - Tham s·ªë c·∫ßn hash
     * @returns {string} - Secure hash
     */
    createSecureHash(params) {
        const sortedParams = Object.keys(params)
            .filter(key => key !== 'vnp_SecureHash' && params[key] !== '')
            .sort()
            .map(key => `${key}=${encodeURIComponent(params[key])}`)
            .join('&');
        
        const secretKey = process.env.VNPAY_HASH_SECRET || 'RAOEXHYVSDDIIENYWSLDIIZTANXUXZFJ';
        const hash = crypto.createHmac('sha512', secretKey)
            .update(sortedParams)
            .digest('hex');
        
        return hash;
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
     * @param {string} orderId - M√£ ƒë∆°n h√†ng
     * @returns {Object} - Th√¥ng tin tr·∫°ng th√°i
     */
    async checkPaymentStatus(orderId) {
        try {
            // VNPay kh√¥ng c√≥ API query tr·ª±c ti·∫øp trong vn-payments
            // C·∫ßn implement ri√™ng n·∫øu c·∫ßn thi·∫øt
            console.log('üîÑ Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n VNPay:', orderId);
            
            return {
                success: true,
                orderId: orderId,
                message: 'Vui l√≤ng ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng trong h·ªá th·ªëng'
            };

        } catch (error) {
            console.error('‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i VNPay:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = VNPayService;